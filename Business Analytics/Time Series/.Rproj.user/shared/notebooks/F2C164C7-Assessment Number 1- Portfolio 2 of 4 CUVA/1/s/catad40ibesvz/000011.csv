"0","# Define base URL and parameters for scraping Autouncle"
"0","base_url <- ""https://www.autouncle.co.uk/en-gb/used-cars?page="""
"0","start_page <- 1"
"0","num_pages <- 10"
"0",""
"0","# Function to extract text from an HTML node, returning NA if empty"
"0","extract_text <- function(node, selector) {"
"0","  node %>% html_element(selector) %>% html_text(trim = TRUE) %>% ifelse(. == """", NA, .)  # Extract and handle empty results"
"0","}"
"0",""
"0","# Function to scrape car data from a single Autouncle page"
"0","scrape_page <- function(url) {"
"0","  page <- tryCatch(read_html(url), error = function(e) NULL)  # Attempt to read the page, return NULL on error"
"0","  if (is.null(page)) return(NULL)  # Exit if page loading failed"
"0","  "
"0","  # Extract car listings and map to a data frame"
"0","  page %>% html_elements("".styles_listing-item__KWJkL"") %>%"
"0","    map_df(~ data.frame("
"0","      Make_Model = extract_text(.x, "".styles_headline__TnlnI""),  # Combined make and model"
"0","      Price = extract_text(.x, "".styles_price__X069_""),         # Price of the car"
"0","      Mileage = extract_text(.x, "".styles_label__x4zE1:nth-child(2) .styles_text__eMFHA""),  # Mileage"
"0","      Year = extract_text(.x, "".styles_highlighted-attributes-container__EH8XY .styles_label__x4zE1:nth-child(1) .styles_text__eMFHA""),  # Year"
"0","      Transmission = extract_text(.x, "".styles_label__x4zE1:nth-child(3) .styles_text__eMFHA""),  # Transmission"
"0","      Fuel_Type = extract_text(.x, "".styles_highlighted-attributes-container__EH8XY .styles_label__x4zE1:nth-child(4) .styles_text__eMFHA""),  # Fuel type"
"0","      Power = extract_text(.x, "".styles_label__x4zE1:nth-child(6) .styles_text__eMFHA""),  # Engine power"
"0","      stringsAsFactors = FALSE  # Prevent factor conversion"
"0","    ))"
"0","}"
"0",""
"0","# Scrape data from 100 pages and combine into a single data frame"
"0","all_cars <- map_df(start_page:(start_page + num_pages - 1), function(page_num) {"
"0","  url <- paste0(base_url, page_num)  # Construct URL for the page"
"0","  cat(""Scraping page:"", page_num, ""\n"")  # Print progress message"
"0","  sleep_time <- runif(1, 2, 4)  # Random delay between 2-4 seconds"
"0","  if (runif(1) < 0.1) { Sys.sleep(runif(1, 5, 10)) }  # Occasionally add a longer delay (5-10 seconds)"
"0","  Sys.sleep(sleep_time)  # Apply the delay"
"0","  scrape_page(url)  # Scrape the page"
"0","})"
"1","Scraping page:"
"1"," "
"1","1"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","2"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","3"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","4"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","5"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","6"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","7"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","8"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","9"
"1"," "
"1","
"
"1","Scraping page:"
"1"," "
"1","10"
"1"," "
"1","
"
"0","View(all_cars)  # Display the raw scraped data"
"0",""
