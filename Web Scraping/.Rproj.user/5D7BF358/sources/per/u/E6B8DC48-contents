# Clear environment
rm(list = ls())
gc()

# Install required packages (if not already installed)
packages <- c("rvest", "dplyr", "stringr", "purrr", "skimr")
install.packages(setdiff(packages, installed.packages()[,"Package"]), dependencies = TRUE)

# Load necessary libraries
library(rvest)
library(dplyr)
library(stringr)
library(purrr)
library(skimr)


# Define base URL and scraping parameters
base_url <- "https://www.autouncle.co.uk/en-gb/used-cars?page="
start_page <- 1   # Starting page
num_pages <- 100   # Number of pages to scrape

# Function to extract text safely (handling NULL cases)
extract_text <- function(node, selector) {
  node %>% html_element(selector) %>% html_text(trim = TRUE) %>% ifelse(. == "", NA, .)
}

# Function to scrape a single page
scrape_page <- function(url) {
  page <- tryCatch(read_html(url), error = function(e) return(NULL))
  
  if (is.null(page)) {
    cat("Failed to load:", url, "\n")
    return(NULL)
  }
  
  # Extract all car listings
  cars_list <- page %>% html_elements(".styles_listing-item__KWJkL") %>%
    map_df(~ data.frame(
      Make_Model    = extract_text(.x, ".styles_headline__TnlnI"),
      Price         = extract_text(.x, ".styles_price__X069_"),
      Mileage       = extract_text(.x, ".styles_label__x4zE1:nth-child(2) .styles_text__eMFHA"),
      Year          = extract_text(.x, ".styles_highlighted-attributes-container__EH8XY .styles_label__x4zE1:nth-child(1) .styles_text__eMFHA"),
      Fuel_Type     = extract_text(.x, ".styles_label__x4zE1:nth-child(3) .styles_text__eMFHA"),
      Transmission  = extract_text(.x, ".styles_highlighted-attributes-container__EH8XY .styles_label__x4zE1:nth-child(4) .styles_text__eMFHA"),
      Power         = extract_text(.x, ".styles_label__x4zE1:nth-child(6) .styles_text__eMFHA"),
      Location      = extract_text(.x, ".styles_location-container__dnoXo .styles_text__eMFHA"),
      stringsAsFactors = FALSE
    ))
  
  return(cars_list)
}

# Scrape multiple pages with random delays
all_cars <- map_df(start_page:(start_page + num_pages - 1), function(page_num) {
  url <- paste0(base_url, page_num)
  cat("Scraping page:", page_num, "\n")
  
  # Introduce human-like browsing delays
  sleep_time <- runif(1, 2, 4)  # Random delay between 2-4 seconds
  if (runif(1) < 0.1) {  # 10% chance of a longer pause
    extra_pause <- runif(1, 5, 10)  # Pause 5-10 seconds
    cat("Extended pause:", round(extra_pause, 2), "seconds...\n")
    Sys.sleep(extra_pause)
  }
  
  cat("Sleeping for", round(sleep_time, 2), "seconds...\n")
  Sys.sleep(sleep_time)
  
  scrape_page(url)
})
###################################################################################################################################

###-------------------------###
# FUNCTION 1: Clean Mileage
clean_mileage <- function(data) {
  data %>%
    mutate(Mileage = str_remove_all(Mileage, "[^0-9]"),
           Mileage = as.numeric(Mileage))
}

###-------------------------###
# FUNCTION 2: Split Fuel Type into Engine Size and Fuel
split_fuel_engine <- function(data) {
  data %>%
    mutate(
      Engine_Size = ifelse(str_detect(Fuel_Type, "\\d\\.\\dL"),
                           str_extract(Fuel_Type, "\\d\\.\\dL"),
                           "0.0"),
      Fuel = str_remove(Fuel_Type, "\\d\\.\\dL\\s*"),
      Fuel = str_trim(Fuel)
    )
}

###-------------------------###
# FUNCTION 3: Convert Engine Size to cc
convert_engine_to_cc <- function(data) {
  data %>%
    mutate(
      Engine_Size = as.numeric(str_remove(Engine_Size, "L")),
      `Engine_Size (cc)` = Engine_Size * 1000
    ) %>%
    select(-Engine_Size)
}

###-------------------------###
# FUNCTION 4: Clean Price column
clean_price <- function(data) {
  data %>%
    mutate(
      `Price (£)` = as.numeric(str_remove_all(Price, "[£,]"))
    ) %>%
    select(-Price)
}

###-------------------------###
# FUNCTION 5: Extract City from Location
clean_location <- function(data) {
  data %>%
    mutate(
      Location = if_else(
        str_detect(Location, "Delivered to you"),
        Location,
        str_trim(str_extract(Location, "(?<=, ).*"))
      )
    )
}

###-------------------------###
# FUNCTION 6: Extract Car Type
extract_car_type <- function(data) {
  car_types <- c(
    "Saloon", "Hatchback", "SUV", "Sports Utility Vehicle",
    "Crossover", "Coupe", "Coupé", "Convertible", "Cabriolet",
    "Estate", "Pick[- ]?up(?: Truck)?", "Minivan", "MPV", "Multi[- ]?Purpose Vehicle",
    "Roadster", "Van", "Cargo Van", "City Car", "Microcar",
    "Liftback", "Fastback", "Targa(?: Top)?", "Limousine", "Supercar",
    "Hypercar", "4x4", "Off[- ]?Roader", "Muscle Car", "Coupe SUV",
    "Campervan", "Recreational Vehicle", "RV", "Sportback", "Panel Van",
    "Combi Van", "Touring", "Shooting Brake", "Double Cab", "Quad Cab",
    "Extended Cab", "Supercrew", "Hardtop", "Softtop"
  )
  car_type_pattern <- paste0("(?i)(", paste(car_types, collapse = "|"), ")")
  
  data %>%
    mutate(`Car Type` = str_extract(Make_Model, car_type_pattern),
           `Car Type` = str_to_title(str_trim(`Car Type`)))
}

###-------------------------###
# FUNCTION 7: Extract Car Brand
extract_car_brand <- function(data) {
  brands <- c("Abarth", "AC", "Acura", "Aixam", "Alfa Romeo", "Alpine", 
              "Aston Martin", "Audi", "Austin", "Bentley", "BMW", "Bugatti", 
              "Buick", "Cadillac", "Caterham", "Chevrolet", "Chrysler", 
              "Citroën", "Cupra", "Dacia", "Daewoo", "Daihatsu", "Dodge", 
              "DS Automobiles", "Eagle", "Ferrari", "Fiat", "Fisker", 
              "Ford", "Genesis", "GMC", "Great Wall", "Haval", "Holden", 
              "Honda", "Hummer", "Hyundai", "Infiniti", "Isuzu", "Jaguar", 
              "Jeep", "Kia", "Lada", "Lamborghini", "Lancia", "Land Rover", 
              "Lexus", "Lincoln", "Lotus", "Mahindra", "Maserati", "Maybach", 
              "Mazda", "McLaren", "Mercedes", "MG", "Mini", "Mitsubishi", 
              "Nissan", "Oldsmobile", "Opel", "Pagani", "Peugeot", "Plymouth", 
              "Polestar", "Pontiac", "Porsche", "Proton", "Ram", "Range Rover", 
              "Renault", "Rolls-Royce", "Rover", "Saab", "Seat", "Skoda", 
              "Smart", "SsangYong", "Subaru", "Suzuki", "Tata", "Tesla", 
              "Toyota", "Vauxhall", "Volkswagen", "VW", "Volvo", "Wiesmann", 
              "Zotye")
  brands <- brands[order(nchar(brands), decreasing = TRUE)]  # Match longest first
  
  data %>%
    mutate(
      Car_brand = sapply(Make_Model, function(make_model) {
        brand_found <- NA
        for (brand in brands) {
          if (str_starts(make_model, brand)) {
            brand_found <- brand
            break
          }
        }
        return(brand_found)
      }),
      Make_Model = str_trim(ifelse(is.na(Car_brand), Make_Model,
                                   str_remove(Make_Model, paste0("^", Car_brand))))
    )
}

###-------------------------###
# FUNCTION 8: Extract Car Model
extract_car_model <- function(data) {
  data %>%
    mutate(
      Car_model = if_else(
        str_detect(Make_Model, "\\s\\d\\.\\d"),
        str_trim(str_extract(Make_Model, ".*?(?=\\s\\d\\.\\d)")),
        str_trim(Make_Model)
      )
    )
}

###-------------------------###
# FUNCTION 9: Clean Year
clean_year <- function(data) {
  data %>%
    mutate(
      Year = case_when(
        str_detect(Year, "\\b\\d{4}\\b") ~ str_extract(Year, "\\b\\d{4}\\b"),
        TRUE ~ NA_character_
      )
    )
}

###-------------------------###
# FUNCTION 10: Final Car_model cleanup (remove 'dr', 'kWh', 'auto', etc.)
final_clean_car_model <- function(data) {
  data %>%
    mutate(
      Car_model = str_split(Car_model, "\\s+") %>% 
        lapply(function(words) {
          words_clean <- words[!str_detect(tolower(words), "dr|kwh|kw|auto")]
          paste(words_clean, collapse = " ")
        }) %>%
        unlist() %>%
        str_squish()
    )
}

###-------------------------###
# PIPELINE EXECUTION
all_cars <- all_cars %>%
  clean_mileage() %>%
  split_fuel_engine() %>%
  convert_engine_to_cc() %>%
  clean_price() %>%
  clean_location() %>%
  extract_car_type() %>%
  extract_car_brand() %>%
  extract_car_model() %>%
  clean_year() %>%
  final_clean_car_model() %>%
  select(-Make_Model, -Fuel_Type, -Power)


View(all_cars)
write.csv(all_cars, "autouncle.csv", row.names = FALSE)
skim(all_cars)
